@import url(https://cdn.materialdesignicons.com/3.6.95/css/materialdesignicons.min.css);

/**
* @prop --dtt_background-color, --kup-data-table_background-color: background-color of the whole component (paginator and table).
* @prop --dtt_border-color, --kup-data-table_border-color: border-color for the whole table.
* @prop --dtt_box-shadow, --kup-data-table_box-shadow: common box-shadow used by the table.
* @prop --dtt_color, --kup-data-table_color: Text color of the column menu when hovering a header cell.
* @prop --dtt_drag-over--allowed, --kup-data-table_drag-over--allowed: the color of the cell when the drop of the drag is allowed.
* @prop --dtt_drag-over--forbidden, --kup-data-table_drag-over--forbidden: the color of the cell when the drop of the drag is forbidden.
* @prop --dtt_filter-border-color, --kup-data-table_filter-border-color: Sets border color onto kup-text-input elements used to filter rows.
* @prop --dtt_filter-background-color, --kup-data-table_filter-background-color: Sets background color onto kup-text-input elements used to filter rows.
* @prop --dtt_group-background-color, --kup-data-table_group-background-color: background-color when grouping elements.
* @prop --dtt_hover-color, --kup-data-table_hover-color: text color of a row when it's selected or hovered.
* @prop --dtt_head-background-color, --kup-data-table_head-background-color: Background color of the table header.
* @prop --dtt_header-offset, --kup-data-table_header-offset: Top offset of the thead when table header must be persistent. Default: 50px;
* @prop --dtt_hover-background-color, --kup-data-table_hover-background-color: background-color of a row when it's selected or hovered.
* @prop --dtt_icons-color, --kup-data-table_icons-color: Color of a table icon.
* @prop --dtt_icons-hover-color, --kup-data-table_icons-hover-color: Color of a hovered icon.
* @prop --dtt_font-size, --kup-data-table_font-size: Sets basic font size.
* @prop --dtt_main-color, --kup-data-table_main-color: Set text color. Has the precedence.
* @prop --dtt_main-color-lighter, --kup-data-table_main-color: Set lighter text color. Has the precedence.
* @prop --dtt_main-color-darker, --kup-data-table_main-color: Set darker text color. Has the precedence.
* @prop --dtt_text-on-main-color, --kup-data-table_text-on-main-color: Color of the grouping chips of a column.
* @prop --dtt_density-box-shadow, --kup-data-table_density-box-shadow: Box shadow of the density combo, to match paginator's.
* @prop --dtt_density-icon-background, --kup-data-table_density-icon-background: Background of the density icon, to match paginator's.
* @prop --dtt_density-icon-color, --kup-data-table_density-icon-color: Color of the density icon, to match paginator's.
*/

:host {
  // variables
  --dtt_background-color: var(--kup-data-table_background-color, #ffffff);
  --dtt_border-color: var(--kup-data-table_border-color, #{$gray-bd});
  --dtt_box-shadow: var(
    --kup-data-table_box-shadow,
    0px 0px 7.5px 0px rgba(128, 128, 128, 0.5)
  );
  --dtt_color: var(--kup-data-table_color, #{$gray-1a});
  --dtt_drag-over--allowed: var(
    --kup-data-table_drag-over--allowed,
    #{rgba($smeup-primary, 0.24)}
  );
  --dtt_drag-over--forbidden: var(
    --kup-data-table_drag-over--forbidden,
    #{rgba($smeup-danger, 0.24)}
  );
  --dtt_filter-border-color: var(
    --kup-data-table_filter-border-color,
    #{$gray-d0}
  );
  --dtt_filter-background-color: var(
    --kup-data-table_filter-background-color,
    white
  );
  --dtt_group-background-color: var(
    --kup-data-table_group-background-color,
    #{$gray-f9}
  );
  --dtt_hover-color: var(--kup-data-table_hover-color, #{$mainTextColor});
  --dtt_head-background-color: var(
    --kup-data-table_head-background-color,
    #f4f4f4
  );
  --dtt_header-offset: var(--kup-data-table_header-offset, 50px);
  --dtt_hover-background-color: var(
    --kup-data-table_hover-background-color,
    #{$gray-f0}
  );
  --dtt_icons-color: var(--kup-data-table_icons-color, #{$gray-80});
  --dtt_icons-hover-color: var(
    --kup-data-table_icons-hover-color,
    #{$smeup-primary}
  );
  --dtt_font-size: var(--kup-data-table_font-size, 0.9375rem);
  --dtt_main-color: var(--kup-data-table_main-color, #6aaaa7);
  --dtt_main-color-lighter: var(
    --kup-data-table_main-color-lighter,
    #{lighten($smeup-primary, 10)}
  );
  --dtt_main-color-darker: var(
    --kup-data-table_main-color-darker,
    #{darken($smeup-primary, 10)}
  );
  --dtt_text-on-main-color: var(--kup-data-table_text-on-main-color, #ffffff);
  --dtt_negative-number-color: var(
    --kup-data-table_negative-number-color,
    #{$mainRed}
  );
  --dtt_density-box-shadow: var(
    --kup-data-table_density-box-shadow,
    0 0 2px 0px rgba(128, 128, 128, 0.5)
  );
  --dtt_density-icon-background: var(
    --kup-data-table_density-icon-background,
    #{lighten($smeup-primary, 50)}
  );
  --dtt_density-icon-color: var(
    --kup-data-table_density-icon-color,
    #{$mainTextColor}
  );
}

#data-table-wrapper {
  background-color: var(--dtt_background-color);

  .below-wrapper {
    overflow-x: auto;
  }

  /*
   * Tags legend:
   * [column-width-related] Marks a comment which is related to the columns size issue when a custom size is specified.
   */
  table {
    border-collapse: collapse;
    color: var(--dtt_color);
    font-size: var(--dtt_font-size);
    min-width: intrinsic; /* Safari/WebKit uses a non-standard name */
    min-width: -moz-max-content; /* Firefox/Gecko */
    min-width: -webkit-max-content; /* Chrome */
    text-align: left;
    width: 100%;

    /* Class to put the table in "width auto" mode: in this way, if all visible columns have a fixed size,
     * the table automatically has a size equal to the sum of the sizes all columns.
     * Additionally it must remove the min width specification to allow a correct sizing.
     * [column-width-related][mandatory]
     *
     * To notice
     * [1] - If we do not place these properties in the correct order, on Firefox we will find that the
     *     tables takes the whole available place, therefore fixed sizes are not respected.
     * [2] - On the contrary, without using these properties, V8 browsers will not understand that the table must have
     *     the width equal to the sum of all columns widths.
     */
    &.auto-width {
      table-layout: fixed; // [mandatory] See [2]
      margin: auto;
      min-width: auto; // [mandatory] See [1] [2]
      width: fit-content; // [mandatory] See [1] [2]
      width: -moz-max-content; // [mandatory] See [1]
    }

    > thead {
      background: var(--dtt_head-background-color);

      th {
        background: var(--dtt_head-background-color);
        border-bottom: 2px solid var(--dtt_border-color);
        border-right: 1px solid var(--dtt_border-color);
        box-sizing: border-box; // [column-width-related][mandatory] make specified sizes be respected
        padding: 0.5rem 0.3125rem;
        position: relative;
        position: sticky;
        text-overflow: ellipsis; // [column-width-related][mandatory] places ... to shorten table caption
        top: 0;
        white-space: nowrap; // [column-width-related][mandatory] Text cannot wrap

        //---- Column name container ----
        $column-sort-margin: 0.5rem;

        .column-title {
          // Mandatory to allow ellipsis of the the column title when column size is really small.
          display: inline-block; // Mandatory to allow width related props to take effect
          max-width: calc(100% - var(--dtt_font-size) - #{$column-sort-margin});
          overflow: hidden;
          text-overflow: ellipsis;
          vertical-align: bottom;
        }

        //---- Filters ----
        kup-text-input.datatable-filter {
          --kup-text-input_border-color: var(--dtt_filter-border-color);
          --kup-text-input_background-color: var(--dtt_filter-background-color);
        }

        //---- Sort icon ----
        .column-sort {
          margin-left: $column-sort-margin;
          cursor: pointer;

          .mdi {
            color: var(--dtt_icons-color);
            transition: color 0.2s ease-in-out;

            &:hover {
              color: var(--dtt_icons-hover-color);
            }
          }

          .mdi-sort-ascending,
          .mdi-sort-descending {
            color: var(--dtt_main-color);
          }
        }

        //---- Column menu icon ----
        .column-menu {
          background-color: var(--dtt_background-color);
          box-shadow: var(--dtt_box-shadow);
          color: var(--dtt_color);
          position: absolute;
          z-index: 100;
          font-weight: normal;
          min-width: 200px;
          min-width: -moz-max-content; /* Firefox/Gecko */
          min-width: -webkit-max-content; /* Chrome */

          &.closed {
            display: none;
          }

          &.open {
            display: block;
            -webkit-animation: display-none-transition 0.5s both;
            -webkit-animation-timing-function: cubic-bezier(
              0.67,
              -0.81,
              0.89,
              0.71
            );
            animation: display-none-transition 0.5s both;
            animation-timing-function: cubic-bezier(0.67, -0.81, 0.89, 0.71);
          }

          ul {
            list-style-type: none;
            margin: 0; // override browser default
            padding: 0; // override browser default

            > li {
              padding: 0.8rem;
              transition: color 0.2s ease-in-out;
              color: #{$mainTextColor};
              transition: color 0.25s, background-color 0.25s, opacity 0.25s;

              &:hover {
                cursor: pointer;
                color: var(--dtt_hover-color);
                background-color: var(--dtt_hover-background-color);
              }

              .mdi {
                margin-right: 0.5rem;
              }
            }
          }
        }
      }

      //---- Columns drag style ----
      &[columns-dragging] {
        // When the drag is over a valid target
        [drag-over] {
          background-color: var(--dtt_drag-over--allowed);

          // Mandatory to allow a correct drop effect when dragging
          > * {
            pointer-events: none;
          }
        }

        // When the drag is over but it is the starting element
        [drag-over][drag-starter] {
          background-color: var(--dtt_drag-over--forbidden);
        }
      }
    }

    > tbody {
      border: 1px solid var(--dtt_border-color);
      cursor: pointer;

      > tr {
        &:hover,
        &.selected {
          > td {
            color: var(--dtt_hover-color);
            background-color: var(--dtt_hover-background-color);
            transition: background-color 250ms ease-in-out;
          }
        }

        // grouping
        &.group {
          background: var(--dtt_group-background-color);
          font-weight: bold;
          border-top: 1px solid var(--dtt_border-color);

          > td {
            padding: 1rem 0;

            .group-cell-content {
              svg {
                cursor: pointer;
                width: var(--dtt_font-size);
                height: var(--dtt_font-size);
                margin: 0 0.3rem;

                &.group-expander {
                  padding: 0.2rem;
                  margin-right: 1rem;
                  margin-left: 0.5rem;
                }

                &.group-remove {
                  fill: #{$mainRed};
                }
              }

              > span {
                display: inline-flex;
                vertical-align: middle;
                outline: none;
              }
            }

            &.total {
              text-align: right;
              padding-right: 1rem;
            }
          }
        }

        > td {
          box-sizing: border-box; // [column-width-related][mandatory] cells total width can is established by prop
          padding: 0.5rem 0.3125rem;
          word-break: break-all; // [column-width-related][mandatory] Breaks text if it has to be wrapped
          word-wrap: break-word; // [column-width-related][mandatory] Breaks text if it has to be wrapped

          &.number {
            text-align: right;
          }

          .row-expander {
            margin-right: 0.5rem;
          }

          .indent {
            display: inline-block;
            height: 1rem;
            width: 2rem;
          }

          .options {
            margin-left: 0.5rem;
            color: var(--dtt_icons-color);

            &:hover {
              color: var(--dtt_icons-hover-color);
              transition: color 250ms ease-out;
            }
          }

          .row-action {
            margin-right: 0.2rem;
          }

          .cell-content {
            &.negative-number {
              color: var(--dtt_negative-number-color);
            }
          }
        }
      }
    }

    &.row-separation > tbody > tr {
      border-bottom: 1px solid var(--dtt_border-color);
    }

    &.column-separation > tbody > tr > td {
      border-right: 1px solid var(--dtt_border-color);
    }

    /**
     * When the header must be persistent (sticky)
     * There is an issue with borders not being moved alongside the content.
     * To prevent horrible renders we move border declarations on other elements
     * Border top gets set on the table itself.
     * thead hosts the lateral borders.
     * tbody sets border-top.
     * Header cells get set to sticky positioning.
     */
    &.persistent-header {
      border-top: 1px solid var(--dtt_border-color);
      position: relative;

      > thead {
        border-color: var(--dtt_border-color);
        border-style: solid;
        border-width: 0 1px 0;

        > th {
          background-color: var(--dtt_head-background-color);
          box-shadow: var(--dtt_box-shadow);
          position: -webkit-sticky; // For Safari
          position: sticky;
          top: var(--dtt_header-offset);
          will-change: transform; // For performance
        }
      }

      > tbody {
        border-top: 3px solid var(--dtt_border-color);
      }
    }

    > tfoot {
      td {
        text-align: right;
        font-weight: bold;
        padding: 0.5rem 0.3125rem;
      }
    }

    &.noGrid {
      &,
      td {
        border: none;
      }
    }

    &.density- {
      &small {
        tbody > tr > td {
          padding-top: 0.2rem;
          padding-bottom: 0.2rem;
          transition: padding 0.1s;
        }
        tbody > tr.group > td {
          padding-top: 0.75rem;
          padding-bottom: 0.75rem;
          transition: padding 0.1s;
        }
      }

      &big {
        tbody > tr > td {
          padding-top: 1rem;
          padding-bottom: 1rem;
          transition: padding 0.1s;
        }
        tbody > tr.group > td {
          padding-top: 1.25rem;
          padding-bottom: 1.25rem;
          transition: padding 0.1s;
        }
      }
    }

    &.fontsize- {
      &small {
        font-size: calc(var(--dtt_font-size) * 0.75);
        transition: font-size 0.1s;
      }
      &big {
        font-size: calc(var(--dtt_font-size) * 1.25);
        transition: font-size 0.1s;
      }
    }
  }

  .paginator-wrapper {
    display: flex;
    flex-flow: wrap;
    min-width: max-content;

    kup-paginator {
      flex-grow: 1;
    }
  }
}

// global filter
#globalFilter {
  margin-bottom: 0.5rem;
  text-align: center;
}

// grouping chips
#group-chips {
  display: flex;
  margin-bottom: 0.5rem;

  > .group-chip {
    display: flex;
    background-color: var(--dtt_main-color);
    padding: 0.5rem;
    color: var(--dtt_text-on-main-color);
    margin-right: 0.5rem;
    cursor: pointer;
    transition: opacity 0.2s ease-in-out;

    &:hover {
      opacity: 0.75;
    }
  }
}

.density-panel,
.fontsize-panel,
.loadmore-panel {
  height: 28px;
  position: relative;
  margin: 0.5rem 0;
  display: flex;
  align-items: center;
  box-shadow: var(--dtt_density-box-shadow);

  .mdi:before,
  &:before {
    color: var(--dtt_density-icon-color);
    font-size: 150%;
  }

  .density-icon,
  .fontsize-icon,
  &.loadmore-icon {
    background: var(--dtt_density-icon-background);
    padding: 0 0.25rem;
    height: 28px;
    cursor: help;
  }

  &.loadmore-icon {
    background: var(--dtt_main-color);
    border: none;
    height: auto;
    cursor: pointer;
    outline: none; //override browser
    transition: background-color 0.25s;

    &:before {
      color: var(--dtt_text-on-main-color);
    }

    &:hover {
      background-color: var(--dtt_main-color-lighter);
    }

    &:active {
      background-color: var(--dtt_main-color-darker);
    }
  }

  .density-label,
  .fontsize-label {
    padding: 0.5rem 0.5rem;
    cursor: pointer;
  }

  svg {
    height: 1.5rem;
    width: 1.5rem;
  }

  [role='button'] {
    outline: none;
    cursor: pointer;
    display: flex;

    svg {
      fill: #{$gray-bd};
    }
  }

  .density-panel-overlay,
  .fontsize-panel-overlay {
    background: var(--dtt_background-color);
    position: absolute;
    top: 1.6rem;
    right: 0;
    display: none;
    opacity: 0;
    z-index: 10;
    box-shadow: #{$mainShadow};
    width: 100px; // I.E. fallback
    width: max-content;

    .wrapper {
      display: flex;
      align-items: center;
      outline: none;
      color: var(--dtt_color);
      cursor: pointer;
      padding: 0.5rem 1rem;
      transition: color 0.25s, background-color 0.25s, opacity 0.25s;

      &:first-child {
        padding-top: 0.75rem;
      }

      &:last-child {
        padding-bottom: 0.75rem;
      }

      svg {
        margin-right: 0.5rem;
        fill: var(--dtt_color);
      }

      &:hover,
      &.active {
        color: var(--dtt_hover-color);
        background-color: var(--dtt_hover-background-color);
        svg {
          fill: var(--dtt_hover-color);
        }
      }
    }

    &.open {
      opacity: 1;
      display: block;
    }
  }
}

@-webkit-keyframes display-none-transition {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@keyframes display-none-transition {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

// Button to load more records.
.load-more-records {
  background-color: transparent;
  border: 0 none;
  color: var(--dtt_icons-color);
  cursor: pointer;
  display: inline-block;
  font-size: calc(var(--dtt_font-size) * 1.2);
  height: calc(var(--dtt_font-size) * 1.2);
  margin: 0 6px;
  padding: 0;
  transition: color 0.3s;
  width: calc(var(--dtt_font-size) * 1.2);

  &:hover {
    color: var(--dtt_icons-hover-color);
  }

  &::before {
    height: inherit;
    width: inherit;
  }
}

/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  KetchupRadioElement,
} from './components/ketchup-radio/ketchup-radio-declarations';


export namespace Components {

  interface KetchupButton {
    'align': string;
    'borderColor': string;
    'btnStyle': any;
    'buttonClass': string;
    'fillspace': boolean;
    'flat': boolean;
    'iconClass': string;
    'label': string;
    'rounded': boolean;
    'showicon': boolean;
    'showtext': boolean;
    'textmode': string;
    'transparent': boolean;
  }
  interface KetchupButtonAttributes extends StencilHTMLAttributes {
    'align'?: string;
    'borderColor'?: string;
    'btnStyle'?: any;
    'buttonClass'?: string;
    'fillspace'?: boolean;
    'flat'?: boolean;
    'iconClass'?: string;
    'label'?: string;
    'onBtnClicked'?: (event: CustomEvent) => void;
    'rounded'?: boolean;
    'showicon'?: boolean;
    'showtext'?: boolean;
    'textmode'?: string;
    'transparent'?: boolean;
  }

  interface KetchupFld {
    /**
    * Props to be passed to the button
    */
    'button': {
      [index: string]: string;
    };
    /**
    * The type of the FLD
    */
    'type': string;
  }
  interface KetchupFldAttributes extends StencilHTMLAttributes {
    /**
    * Props to be passed to the button
    */
    'button'?: {
      [index: string]: string;
    };
    /**
    * The type of the FLD
    */
    'type'?: string;
  }

  interface KetchupRadio {
    /**
    * Direction in which the radio elements must be placed
    */
    'direction': string;
    /**
    * Label to describe the radio group
    */
    'label': string;
    /**
    * Radio elements to display
    */
    'radioElements': KetchupRadioElement[];
    /**
    * Radio elements value
    */
    'radioName': string;
  }
  interface KetchupRadioAttributes extends StencilHTMLAttributes {
    /**
    * Direction in which the radio elements must be placed
    */
    'direction'?: string;
    /**
    * Label to describe the radio group
    */
    'label'?: string;
    'onKetchupRadioChanged'?: (event: CustomEvent) => void;
    /**
    * Radio elements to display
    */
    'radioElements'?: KetchupRadioElement[];
    /**
    * Radio elements value
    */
    'radioName'?: string;
  }

  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
  interface MyComponentAttributes extends StencilHTMLAttributes {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'KetchupButton': Components.KetchupButton;
    'KetchupFld': Components.KetchupFld;
    'KetchupRadio': Components.KetchupRadio;
    'MyComponent': Components.MyComponent;
  }

  interface StencilIntrinsicElements {
    'ketchup-button': Components.KetchupButtonAttributes;
    'ketchup-fld': Components.KetchupFldAttributes;
    'ketchup-radio': Components.KetchupRadioAttributes;
    'my-component': Components.MyComponentAttributes;
  }


  interface HTMLKetchupButtonElement extends Components.KetchupButton, HTMLStencilElement {}
  var HTMLKetchupButtonElement: {
    prototype: HTMLKetchupButtonElement;
    new (): HTMLKetchupButtonElement;
  };

  interface HTMLKetchupFldElement extends Components.KetchupFld, HTMLStencilElement {}
  var HTMLKetchupFldElement: {
    prototype: HTMLKetchupFldElement;
    new (): HTMLKetchupFldElement;
  };

  interface HTMLKetchupRadioElement extends Components.KetchupRadio, HTMLStencilElement {}
  var HTMLKetchupRadioElement: {
    prototype: HTMLKetchupRadioElement;
    new (): HTMLKetchupRadioElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLElementTagNameMap {
    'ketchup-button': HTMLKetchupButtonElement
    'ketchup-fld': HTMLKetchupFldElement
    'ketchup-radio': HTMLKetchupRadioElement
    'my-component': HTMLMyComponentElement
  }

  interface ElementTagNameMap {
    'ketchup-button': HTMLKetchupButtonElement;
    'ketchup-fld': HTMLKetchupFldElement;
    'ketchup-radio': HTMLKetchupRadioElement;
    'my-component': HTMLMyComponentElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
